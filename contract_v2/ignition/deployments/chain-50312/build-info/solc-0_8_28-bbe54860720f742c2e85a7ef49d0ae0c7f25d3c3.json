{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-bbe54860720f742c2e85a7ef49d0ae0c7f25d3c3",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SomniaBook.sol": "project/contracts/SomniaBook.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/SomniaBook.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract SomniaBook is ReentrancyGuard, Ownable {\n    \n    // Events (simplified)\n    event BetPlaced(bytes32 indexed betId, address indexed user, uint256 amount, uint256 odds);\n    event BetResolved(bytes32 indexed betId, bool won, uint256 payout);\n    event BetCancelled(bytes32 indexed betId, uint256 refund);\n\n    // Optimized struct - removed strings, packed better\n    struct Bet {\n        address user;          // 20 bytes\n        uint96 amount;         // 12 bytes (can handle up to ~79 billion ETH)\n        uint96 odds;           // 12 bytes \n        uint32 timestamp;      // 4 bytes (good until 2106)\n        uint8 status;          // 1 byte: 0=active, 1=won, 2=lost, 3=cancelled, 4=claimed\n    }\n\n    // State variables (minimized)\n    mapping(bytes32 => Bet) public bets;\n    mapping(address => bytes32[]) public userBets;\n    \n    uint16 public platformFee = 250;              // 2.5% (out of 10000)\n    uint96 public minBetAmount = 0.001 ether;     \n    uint96 public maxBetAmount = 10 ether;        \n    \n    address public feeRecipient;\n    uint256 public totalFeesCollected;\n    uint32 public totalBetsPlaced;\n\n    // Simplified modifiers\n    modifier validBet(bytes32 _betId) {\n        require(bets[_betId].user != address(0), \"Invalid bet\");\n        _;\n    }\n\n    modifier onlyBetOwner(bytes32 _betId) {\n        require(bets[_betId].user == msg.sender, \"Not owner\");\n        _;\n    }\n\n    constructor(address _feeRecipient) Ownable(msg.sender) {\n        require(_feeRecipient != address(0), \"Invalid recipient\");\n        feeRecipient = _feeRecipient;\n    }\n\n    // Simplified bet placement (no market/selection strings)\n    function placeBet(uint256 _odds) \n        external payable nonReentrant returns (bytes32 betId) {\n        \n        require(msg.value >= minBetAmount && msg.value <= maxBetAmount, \"Invalid amount\");\n        require(_odds >= 1000, \"Invalid odds\");\n\n        betId = keccak256(abi.encodePacked(msg.sender, msg.value, block.timestamp, totalBetsPlaced));\n\n        bets[betId] = Bet({\n            user: msg.sender,\n            amount: uint96(msg.value),\n            odds: uint96(_odds),\n            timestamp: uint32(block.timestamp),\n            status: 0\n        });\n\n        userBets[msg.sender].push(betId);\n        totalBetsPlaced++;\n\n        emit BetPlaced(betId, msg.sender, msg.value, _odds);\n    }\n\n    // Simplified resolution\n    function resolveBets(bytes32[] calldata _betIds, bool _won) external onlyOwner {\n        uint256 len = _betIds.length;\n        uint8 status = _won ? 1 : 2;\n        \n        for (uint256 i; i < len;) {\n            Bet storage bet = bets[_betIds[i]];\n            require(bet.user != address(0) && bet.status == 0, \"Invalid bet\");\n            \n            bet.status = status;\n            emit BetResolved(_betIds[i], _won, 0);\n            \n            unchecked { ++i; }\n        }\n    }\n\n    // Simplified cancellation\n    function cancelBets(bytes32[] calldata _betIds) external onlyOwner {\n        uint256 len = _betIds.length;\n        \n        for (uint256 i; i < len;) {\n            bytes32 betId = _betIds[i];\n            Bet storage bet = bets[betId];\n            \n            require(bet.user != address(0) && bet.status == 0, \"Invalid bet\");\n            \n            bet.status = 3;\n            \n            (bool success,) = payable(bet.user).call{value: bet.amount}(\"\");\n            require(success, \"Refund failed\");\n            \n            emit BetCancelled(betId, bet.amount);\n            unchecked { ++i; }\n        }\n    }\n\n    // Simplified claiming\n    function claimWinnings(bytes32 _betId) external nonReentrant validBet(_betId) onlyBetOwner(_betId) {\n        Bet storage bet = bets[_betId];\n        require(bet.status == 1, \"Cannot claim\");\n        \n        bet.status = 4;\n        \n        uint256 gross = (uint256(bet.amount) * bet.odds) / 1000;\n        uint256 fee = (gross * platformFee) / 10000;\n        uint256 net = gross - fee;\n        \n        totalFeesCollected += fee;\n        \n        (bool success,) = payable(msg.sender).call{value: net}(\"\");\n        require(success, \"Payout failed\");\n        \n        emit BetResolved(_betId, true, net);\n    }\n\n    // View functions (simplified)\n    function getBet(bytes32 _betId) external view validBet(_betId) \n        returns (address user, uint256 amount, uint256 odds, uint256 timestamp, uint8 status) {\n        Bet storage bet = bets[_betId];\n        return (bet.user, bet.amount, bet.odds, bet.timestamp, bet.status);\n    }\n\n    function getUserBets(address _user) external view returns (bytes32[] memory) {\n        return userBets[_user];\n    }\n\n    // Admin functions (minimized)\n    function setPlatformFee(uint16 _fee) external onlyOwner {\n        require(_fee <= 1000, \"Fee too high\");\n        platformFee = _fee;\n    }\n\n    function setBetLimits(uint96 _minBet, uint96 _maxBet) external onlyOwner {\n        require(_minBet < _maxBet, \"Invalid limits\");\n        minBetAmount = _minBet;\n        maxBetAmount = _maxBet;\n    }\n\n    function withdrawFees() external onlyOwner {\n        require(totalFeesCollected > 0, \"No fees\");\n        uint256 amount = totalFeesCollected;\n        totalFeesCollected = 0;\n        \n        (bool success,) = payable(feeRecipient).call{value: amount}(\"\");\n        require(success, \"Withdrawal failed\");\n    }\n\n    function emergencyWithdraw() external onlyOwner {\n        (bool success,) = payable(owner()).call{value: address(this).balance}(\"\");\n        require(success, \"Emergency failed\");\n    }\n\n    receive() external payable {}\n}\n"
      }
    }
  }
}