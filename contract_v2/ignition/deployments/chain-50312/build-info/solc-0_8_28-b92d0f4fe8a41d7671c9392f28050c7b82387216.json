{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-b92d0f4fe8a41d7671c9392f28050c7b82387216",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/ChronoVault.sol": "project/contracts/ChronoVault.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/ChronoVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title ChronoVault\n * @dev Decentralized time-locked multisig vault system for Somnia network\n * @notice Allows users/DAOs to lock tokens that can only be unlocked by majority signatures after a time/block condition\n */\ncontract ChronoVault is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    struct Vault {\n        uint256 id;\n        string name;\n        address creator;\n        address[] signers;\n        uint8 requiredSignatures;\n        address tokenAddress; // address(0) for native tokens\n        uint256 amount;\n        uint256 unlockTimestamp;\n        uint256 unlockBlockHeight;\n        bool useBlockNumber;\n        bool isUnlocked;\n        bool isWithdrawn;\n        mapping(address => bool) hasSigned;\n        uint256 currentSignatures;\n        uint256 createdAt;\n    }\n\n    struct VaultInfo {\n        uint256 id;\n        string name;\n        address creator;\n        address[] signers;\n        uint8 requiredSignatures;\n        address tokenAddress;\n        uint256 amount;\n        uint256 unlockTimestamp;\n        uint256 unlockBlockHeight;\n        bool useBlockNumber;\n        bool isUnlocked;\n        bool isWithdrawn;\n        uint256 currentSignatures;\n        uint256 createdAt;\n    }\n\n    mapping(uint256 => Vault) public vaults;\n    mapping(address => uint256[]) public userVaults;\n    mapping(address => uint256[]) public signerVaults;\n\n    // vaultId => signer => approved\n    mapping(uint256 => mapping(address => bool)) private _approvals;\n    \n    // fast access: vaultId => signer => isSigner\n    mapping(uint256 => mapping(address => bool)) private _isSigner;\n\n    \n    uint256 public nextVaultId = 1;\n    uint256 public totalVaults;\n    uint256 public constant MAX_SIGNERS = 50;\n    uint256 public constant MIN_LOCK_TIME = 1 hours;\n    uint256 public constant MIN_BLOCK_LOCK_TIME = 1 hours;\n    \n    // Platform fee (in basis points, 100 = 1%)\n    uint256 public platformFee = 50; // 0.5%\n    uint256 public penaltyFee = 500; // 5% penalty for emergency withdrawal\n\n    address public feeRecipient;\n    \n    event VaultCreated(\n        uint256 indexed vaultId,\n        address indexed creator,\n        string name,\n        address tokenAddress,\n        uint256 amount,\n        uint256 unlockTimestamp,\n        bool useBlockNumber\n    );\n    \n    event VaultSigned(uint256 indexed vaultId, address indexed signer, uint256 currentSignatures);\n    event VaultUnlocked(uint256 indexed vaultId);\n    event VaultWithdrawn(uint256 indexed vaultId, address indexed recipient, uint256 amount);\n    event EmergencyWithdraw(uint256 indexed vaultId, address indexed creator, uint256 amount);\n    \n    modifier onlyVaultSigner(uint256 vaultId) {\n        require(_isSigner[vaultId][msg.sender], \"Not a signer\");\n        _;\n    }\n    \n    modifier vaultExists(uint256 vaultId) {\n        require(vaultId < nextVaultId && vaultId > 0, \"Vault does not exist\");\n        _;\n    }\n    \n    constructor(address _feeRecipient) Ownable(msg.sender) {\n        feeRecipient = _feeRecipient != address(0) ? _feeRecipient : msg.sender;\n    }\n    \n    /**\n     * @dev Create a new time-locked multisig vault\n     * @param name Human-readable name for the vault\n     * @param signers Array of authorized signer addresses\n     * @param requiredSignatures Minimum signatures needed to unlock\n     * @param tokenAddress Token contract address (address(0) for native tokens)\n     * @param amount Amount of tokens to lock\n     * @param unlockTimestamp Timestamp after which vault can be unlocked\n     * @param unlockBlockHeight Block height after which vault can be unlocked\n     * @param useBlockNumber If true, use block height for unlock condition; otherwise use timestamp\n     */\n    function createVault(\n        string memory name,\n        address[] memory signers,\n        uint8 requiredSignatures,\n        bool useBlockNumber,\n        address tokenAddress,\n        uint256 amount,\n        uint256 unlockTimestamp,\n        uint256 unlockBlockHeight\n    ) external payable nonReentrant returns (uint256) {\n        require(bytes(name).length > 0, \"Name cannot be empty\");\n        require(signers.length > 0 && signers.length <= MAX_SIGNERS, \"Invalid signers count\");\n        require(requiredSignatures > 0 && requiredSignatures <= signers.length, \"Invalid required signatures\");\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        if (useBlockNumber) {\n            require(\n                unlockBlockHeight > block.number && \n                unlockBlockHeight > block.number + (MIN_BLOCK_LOCK_TIME / 13), // Approx. 13s per block\n                \"Lock block height too low\"\n            );\n        } else {\n            require(\n                unlockTimestamp > block.timestamp, \"Lock time too short\"\n            );\n        }\n        \n\n        // Transfer tokens to contract\n       _handleTokenTransfer(tokenAddress, amount);\n\n        uint256 vaultId =nextVaultId++;\n        Vault storage vault = vaults[vaultId];\n\n        vault.id = vaultId;\n        vault.name = name;\n        vault.creator = msg.sender;\n        vault.requiredSignatures = requiredSignatures;\n        vault.tokenAddress = tokenAddress;\n        vault.amount = amount;\n        vault.unlockTimestamp = unlockTimestamp;\n        vault.unlockBlockHeight = unlockBlockHeight;\n        vault.useBlockNumber = useBlockNumber;\n        vault.createdAt = block.timestamp;\n\n        // Validate signers\n        for (uint8 i = 0; i < signers.length; i++) {\n            require(signers[i] != address(0), \"Invalid signer address\");\n            require(!_isSigner[vaultId][signers[i]], \"Duplicate signer\");\n            _isSigner[vaultId][signers[i]] = true;\n            vault.signers.push(signers[i]);\n            signerVaults[signers[i]].push(vaultId);\n        }\n        \n        // Update tracking\n        userVaults[msg.sender].push(vaultId);\n        totalVaults++;\n        \n        emit VaultCreated(\n            vaultId,\n            msg.sender,\n            name,\n            tokenAddress,\n            amount,\n            unlockTimestamp,\n            useBlockNumber\n        );\n        \n        return vaultId;\n    }\n\n    function _handleTokenTransfer(address tokenAddress, uint256 amount) internal {\n        if (tokenAddress == address(0)) {\n            require(msg.value == amount, \"Incorrect native token amount\");\n        } else {\n            require(msg.value == 0, \"No native tokens needed for ERC20\");\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), amount);\n        }\n    }\n    \n    /**\n     * @dev Sign a vault to approve unlocking\n     * @param vaultId ID of the vault to sign\n     */\n    function signVault(uint256 vaultId) external vaultExists(vaultId) onlyVaultSigner(vaultId) {\n        Vault storage vault = vaults[vaultId];\n        require(vault.creator != address(0), \"Vault not found\");\n        require(!vault.isWithdrawn, \"Vault already withdrawn\");\n        require(!vault.hasSigned[msg.sender], \"Already signed\");\n        \n        vault.hasSigned[msg.sender] = true;\n        vault.currentSignatures++;\n        \n        if (vault.currentSignatures >= vault.requiredSignatures && canUnlock(vaultId)) {\n            vault.isUnlocked = true;\n            emit VaultUnlocked(vaultId);\n        }\n        \n        emit VaultSigned(vaultId, msg.sender, vault.currentSignatures);\n    }\n    \n    /**\n     * @dev Withdraw tokens from an unlocked vault\n     * @param vaultId ID of the vault to withdraw from\n     * @param recipient Address to receive the tokens\n     */\n    function withdrawVault(uint256 vaultId, address payable recipient) external vaultExists(vaultId) nonReentrant {\n        Vault storage vault = vaults[vaultId];\n        require(vault.isUnlocked, \"Vault not unlocked\");\n        require(!vault.isWithdrawn, \"Already withdrawn\");\n        require(recipient != address(0), \"Invalid recipient\");\n        \n        // Only signers or creator can withdraw\n        require(\n            isVaultSigner(vaultId, msg.sender) || msg.sender == vault.creator,\n            \"Not authorized to withdraw\"\n        );\n        \n        vault.isWithdrawn = true;\n        \n        uint256 feeAmount = (vault.amount * platformFee) / 10000;\n        uint256 withdrawAmount = vault.amount - feeAmount;\n        \n        // Transfer tokens\n        if (vault.tokenAddress == address(0)) {\n            if (feeAmount > 0) {\n                (bool success, ) = feeRecipient.call{value: feeAmount}(\"\");\n                require(success, \"Fee transfer failed\");\n            }\n            (bool ok, ) = recipient.call{value: withdrawAmount}(\"\");\n            require(ok, \"Withdrawal Failed\");\n        } else {\n            if (feeAmount > 0) {\n                IERC20(vault.tokenAddress).safeTransfer(feeRecipient, feeAmount);\n            }\n            IERC20(vault.tokenAddress).safeTransfer(recipient, withdrawAmount);\n        }\n        \n        emit VaultWithdrawn(vaultId, recipient, withdrawAmount);\n    }\n    \n    /**\n     * @dev Emergency withdraw for vault creator (with penalty)\n     * @param vaultId ID of the vault\n     */\n    function emergencyWithdraw(uint256 vaultId) external vaultExists(vaultId) nonReentrant {\n        Vault storage vault = vaults[vaultId];\n        require(msg.sender == vault.creator, \"Only creator can emergency withdraw\");\n        require(!vault.isWithdrawn, \"Already withdrawn\");\n        \n        vault.isWithdrawn = true;\n        \n        // Higher fee for emergency withdrawal (5%)\n        uint256 penaltyAmount = (vault.amount * penaltyFee) / 10000;\n        uint256 withdrawAmount = vault.amount - penaltyAmount;\n        \n        if (vault.tokenAddress == address(0)) {\n            (bool ok, ) = feeRecipient.call{value: penaltyAmount}(\"\");\n            require(ok, \"Penalty transfer failed\");\n            \n            (bool success, ) = msg.sender.call{value: withdrawAmount}(\"\");\n            require(success, \"Withdrawal Failed\");\n\n        } else {\n            IERC20(vault.tokenAddress).safeTransfer(feeRecipient, penaltyAmount);\n            IERC20(vault.tokenAddress).safeTransfer(msg.sender, withdrawAmount);\n        }\n        \n        emit EmergencyWithdraw(vaultId, msg.sender, withdrawAmount);\n    }\n\n    \n    /**\n     * @dev Check if vault can be unlocked based on time/block conditions\n     * @param vaultId ID of the vault\n     */\n    function canUnlock(uint256 vaultId) public view vaultExists(vaultId) returns (bool) {\n        Vault storage vault = vaults[vaultId];\n        \n        if(vault.useBlockNumber) {\n            return block.number >= vault.unlockBlockHeight;\n        } else {\n            return block.timestamp >= vault.unlockTimestamp;\n        }\n        \n    }\n    \n    /**\n     * @dev Check if address is a valid signer for vault\n     */\n    function isVaultSigner(uint256 vaultId, address signer) public view vaultExists(vaultId) returns (bool) {\n        return _isSigner[vaultId][signer];\n    }\n    \n    /**\n     * @dev Get complete vault information\n     */\n    function getVault(uint256 vaultId) external view vaultExists(vaultId) returns (VaultInfo memory) {\n        Vault storage vault = vaults[vaultId];\n        \n        return VaultInfo({\n            id: vault.id,\n            name: vault.name,\n            creator: vault.creator,\n            signers: vault.signers,\n            requiredSignatures: vault.requiredSignatures,\n            tokenAddress: vault.tokenAddress,\n            amount: vault.amount,\n            unlockTimestamp: vault.unlockTimestamp,\n            unlockBlockHeight: vault.unlockBlockHeight,\n            useBlockNumber: vault.useBlockNumber,\n            isUnlocked: vault.isUnlocked,\n            isWithdrawn: vault.isWithdrawn,\n            currentSignatures: vault.currentSignatures,\n            createdAt: vault.createdAt\n        });\n    }\n    \n    /**\n     * @dev Get vaults created by user\n     */\n    function getUserVaults(address user) external view returns (uint256[] memory) {\n        return userVaults[user];\n    }\n    \n    /**\n     * @dev Get vaults where user is a signer\n     */\n    function getSignerVaults(address signer) external view returns (uint256[] memory) {\n        return signerVaults[signer];\n    }\n    \n    /**\n     * @dev Check if user has signed a specific vault\n     */\n    function hasUserSigned(uint256 vaultId, address user) external view vaultExists(vaultId) returns (bool) {\n        return vaults[vaultId].hasSigned[user];\n    }\n    \n    /**\n     * @dev Get vault signing status\n     */\n    function getVaultSigningStatus(uint256 vaultId) external view vaultExists(vaultId) returns (\n        uint256 currentSignatures,\n        uint256 requiredSignatures,\n        bool canUnlockNow,\n        bool isUnlocked\n    ) {\n        Vault storage vault = vaults[vaultId];\n        return (\n            vault.currentSignatures,\n            vault.requiredSignatures,\n            canUnlock(vaultId),\n            vault.isUnlocked\n        );\n    }\n    \n    // Admin functions\n    function setPlatformFee(uint256 newFee) external onlyOwner {\n        require(newFee <= 1000, \"Fee too high\"); // Max 10%\n        platformFee = newFee;\n    }\n\n    function setPenaltyFee(uint256 newFee) external onlyOwner {\n        require(newFee <= 2000, \"Penalty fee too high\"); // Max 20%\n        penaltyFee = newFee;\n    }\n    \n    function setFeeRecipient(address newRecipient) external onlyOwner {\n        require(newRecipient != address(0), \"Invalid recipient\");\n        feeRecipient = newRecipient;\n    }\n    \n    /**\n     * @dev Get contract stats\n     */\n    function getStats() external view returns (\n        uint256 totalVaultsCount,\n        uint256 totalValueLocked,\n        uint256 activeVaults\n    ) {\n        uint256 tvl = 0;\n        uint256 active = 0;\n        \n        for (uint256 i = 1; i < nextVaultId; i++) {\n            if (!vaults[i].isWithdrawn) {\n                if (vaults[i].tokenAddress == address(0)) {\n                    tvl += vaults[i].amount;\n                }\n                active++;\n            }\n        }\n        \n        return (totalVaults, tvl, active);\n    }\n\n\n    receive() external payable {}\n}"
      }
    }
  }
}